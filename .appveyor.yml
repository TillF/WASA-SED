image: 
#- Ubuntu #no use distributing Ubuntu binaries, may be used later for testing
- Visual Studio 2015 #do we actually use this? I dunno
#Visual Studio 2017 does not contain some mingw installations

platform:
  - x86

environment:
  MINGW_DIR: C:\MinGW\bin 
  MINGW64_DIR: C:\mingw-w64\x86_64-7.3.0-posix-seh-rt_v5-rev0\mingw64\bin 
  MSYS_DIR: C:\MinGW\msys\1.0\bin 
  MSYS2_DIR: C:\msys64\mingw32\bin 
  #APPVEYOR_RDP_PASSWORD: aA45-#nuto
  
build: off
 #disables MSBuild functionality

branches:
  only:
    - master
    - autobuild
    - /rev_\d*.*/

init:
  # - ps: |
     # if ($isLinux) {
       # Write-Host "This is Linux!"
     # } else {
       # Write-Host "This is NOT Linux!"
       # iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1')) #cannot connect (firewall up?)
     # }

install:
    
# #- echo Ubuntu build script
# - sh: ECHO this is sh-build
# - sh: make --version
# - sh: make all OUTDIR=build_lin

  - cmd: ECHO this is batch-build
  #maintain original value of PATH variable
  - cmd: set ORG_PATH=%PATH%

 #try mingw
#fails "recipe for target ...failed" (make too old?) GNU Make 3.82.90
  # - cmd: set PATH=%MINGW_DIR%;%ORG_PATH%
  # - cmd: mingw32-make.exe --version 
  # - cmd: mingw32-make.exe all OUTDIR=build_win_mingw
  # - cmd: build_win_mingw\bin\wasa.exe
 
 #try mingw64 - works! GNU Make 4.2.1
  - cmd: set PATH=%MINGW64_DIR%;%ORG_PATH%
  - cmd: mingw32-make.exe --version
  - cmd: mingw32-make.exe all DEBUG=0 OUTDIR=build_win_mingw64
  - cmd: build_win_mingw64\bin\wasa.exe #if this fails, this should stop the deployment
  #collect DLL dependencies ((takes some time)
  - cmd: bash .copy_dlls.sh build_win_mingw64/bin #enable!
   #copies libgcc_s_seh-1.dll, libgfortran-4.dll, libquadmath-0.dll, libwinpthread-1.dll
  
 # #try msys - fails in update_revision.bat - needs sh commands?
  # - cmd: set PATH=%MSYS_DIR%;%ORG_PATH%
  # - cmd: make.exe --version
  # - cmd: make.exe all OUTDIR=build_win

#try msys2 - works! GNU Make 4.2.1
  - cmd: set PATH=%MSYS2_DIR%;%ORG_PATH%
  - cmd: mingw32-make.exe --version
  - cmd: mingw32-make.exe all DEBUG=0 OUTDIR=build_win_msys2
  - cmd: build_win_msys2\bin\wasa.exe #if this fails, this should stop the deployment
  #collect DLL dependencies ((takes some time)
  - cmd: bash .copy_dlls.sh build_win_msys2/bin #enable!
   #copies libgcc_s_dw2-1.dll, libgfortran-4.dll, libquadmath-0.dll, libwinpthread-1.dll
   
artifacts:

  
  - path: build_win_msys2/bin
    name: WASA-SEDexec_windows_msys2
    type: zip
 
  - path: build_win_mingw64/bin
    name: WASA-SEDexec_mingw64
    type: zip

# after_build:	
# - ps: foreach ($artifactName in $artifacts.keys) {
      # Write-Host $artifacts[$artifactName]
      # }

deploy:
  environment: Windows_binary  
  release: $(APPVEYOR_REPO_TAG_NAME)-build$(APPVEYOR_BUILD_VERSION)
  tag: $(APPVEYOR_REPO_TAG_NAME)  #update the existing tag instead of creating a new one which causes a loop -build$(APPVEYOR_BUILD_VERSION)
  description: 'Windows binaries built by Appveyor ($(APPVEYOR_REPO_COMMIT_TIMESTAMP))'
  provider: GitHub
  auth_token:
    secure: fb2gcx61ygo+diunoypj9CGkOYRaFMmucSkkyNnntKdcJYGm6boXjsSAfprc1K/+
  artifacts: WASA-SEDexec_windows_msys2,WASA-SEDexec_mingw64
  draft: false
  prerelease: false
  force_update: true #overwrite existing releases
  #skip_tags: true #avoid endless loop by pushed (and tagged) release
  on:
    branch: master                 # release from master branch only (in fact, this looks for "master" in the tag, so I disabled it 
    APPVEYOR_REPO_TAG: true        # deploy on tag push only

on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
#allow login to remote machine after build

# configuration for "master" branch
# build in Release mode and deploy to Azure
